位置ベースの移動
今、behaviorに
「this.position.add(this.velocity)」
使ってるけど、これを選択式にして、デフォはこれでいいとして、これとは別に、たとえば、
「
  this.position.x = this.move.r * cos(this.move.angle) + this.move.cx;
  this.position.y = this.move.r * sin(this.move.angle) + this.move.cy;
  this.move.angle += this.move.angleSpeed;
」(rを増やせば螺旋もらくらく)
みたいに、位置ベースで・・this.moveには動きを表現するパラメータが入る感じ。他にも、
「this.position.x += this.move.vx, this.move.vx += this.move.ax」
的な？そういうのを・・んー。
shotDirectionはこれとは別に。directionがないと表示の時に困るけどそれは適宜計算するのもあり・・とか？

class FireCommand{
  constructor(fireSeed, dict){
    if(fireSeed === undefined){ this.fire = createFirePattern({}); }
    else{
      const fireData = interpretNestedData(fireSeed, dict);
      this.fire = createFirePattern(fireData); // 変更
    }
  }
  execute(unit){
    this.fire(unit);
    unit.actionIndex++;
    return true;
  }
}

衝突判定の手順
colliderを各オブジェクトに用意する（この場合UnitとSelfUnitに必要）、Shapeから設定できそう。
colliderの衝突を判定する関数を用意する。quadTreeも用意する。
colliderの更新が出来るようにする。
colliderとは別にフラグを設けて事前に計算を回避できるようにする（ENEMY_BULLET同士は当たらないとか）。
メインループにquadTreeの更新やらいろいろ組み込んで・・あとはまあ、色々と。

未指定の場合、ノードユニットをDEFAULTにして、撃ちだすユニットはENEMYにする。
ENMEYだけ指定する場合、ENEMYで、撃ちだすユニットをENEMY_BULLETにする。
両方指定（たとえばENEMYがENEMYを作るとかDEFAULTがDEFAULTを作るとか・・）のときは両方参照する。
こういう場合は一番多い場合をデフォルトにするのが定石。でないといちいちめんどくさい。

画面外で消えるときはcollisionFlagをOFFにしよう。
パターンチェンジでunitを抹消するときもcollisionFlagをOFFにしよう。
NOTHINGやめてOFFにする。了解！
