パターンの作り方（現時点）
{
  x:Cannonの初期x座標,
  y:Cannonの初期y座標,
  speed:Cannonの初期bulletSpeed(任意),
  direction:Cannonの初期bulletDirection(任意),
  action:[行動配列(作り方は後で)],
  short:{行動配列のショートカット},
  fire:{発射パターンについて}
}
actionの各セグメント
{wait:n} nカウントの間何もしない
{type:"fire", name:発射パターン名} 同じパターン名のfire内のプロパティが生成する関数に従って発射
{type:"config", mode:"set"もしくは"add", speed:任意、direction:任意}
bulletSpeed, bulletDirectionをsetまたはaddに従って操作する。setは値指定、addは加える。
setの場合は配列にする（[a]でa,[a, b]でaからbまでのどれか、[a, b, i]でaからi刻みでbまでのどれか）
{type:"aim", margin:任意}
bulletDirectionをmarginの範囲で自機狙いに切り替える。
{type:"vanish"}
消滅するフラグを立てる（bullet用）
{repeat:~~, back:~~} repeatの回数だけインデックスをbackだけバックする、同じターン内の繰り返し。
{loop:~~, back:~~} loopの回数だけインデックスをbackだけバックする、これはバック時にターンを抜ける。
無限ループの場合はloop:Infinityとする感じ。

今んとこ、こんな感じ。2019/12/22(冬至)

パターン1:
{x:240, y:320, speed:2, direction:90,
action:[
{type:"config", mode:"add", direction:2}, "routine", // 略記法・・配列が入ってるので展開して放り込む。
{type:"config", mode:"add", direction:-2}, "routine",
{loop:Infinity, back:10}],
short:{routine:[{type:"fire", name:"radial16"}, {wait:4}, {loop:8, back:3}, {wait:16}]},
fire:{radial16:{radial:{count:16}}}
};
パターン2: (最初のやつ)
{x:240, y:160,
action:[{type:"config", mode:"set", speed:[3, 6], direction:[0, 360]}, {type:"fire", name:"u"}, {repeat:2, back:2}, {loop:Infinity, back:3}],
fire:{u:{}}
};

バーストどうする？
lineの実装より先にバースト作りたい。lineもいいんだけどね・・

あそこさ、たとえば、{type:"config", content:["add", "-", 2]}とか書けないの？
パーサーにそこら辺・・要するに、typeかwaitかrepeatかloopしかないわけで、そこら辺。
つまりtypeに関してはここを配列にする、無いところは"-"でおいとく、的な？通すときに翻訳してオブジェクトにできたらいいね。
と・・？
{x:240, y:320, speed:2, direction:90,
action:[
{type:"config", mode:"add", direction:2}, "routine", // 略記法・・配列が入ってるので展開して放り込む。
{type:"config", mode:"add", direction:-2}, "routine",
{loop:Infinity, back:10}],
short:{routine:[{type:"fire", name:"radial16"}, {wait:4}, {loop:8, back:3}, {wait:16}]},
fire:{radial16:{radial:{count:16}}}
};
→
{
  set:[240, 320, 2, 90],
  action:[["config", "add", "-", 2], "routine", ["config", "add", "-", -2], "routine", {loop:Infinity, back:10}],
  short:{routine:[["fire", "radial16"], {wait:4}, {loop:8, back:3}, {wait:16}]},
  fire:{radial16:{radial:{count:16}}}
}
説明・・
setはセットする、セットしないところ（スピードとか）は"-"を入れる。
こんな感じ
{
  set:[240, 160, "-", "-"],
  action:[["config", "set", [3, 6], [0, 360]], ["fire", "u"], {repeat:2, back:2}, {loop:Infinity, back:3}],
  fire:{u:{}}
}
ここから復元できるようにしたい。
そうすれば、たとえばvanishなんかは["vanish"]で済むようになる。["set", "align"]で簡単に「bulletが作るbulletの速さと
向きをそのまま同じもので固定」できるし。バーストに一歩近づくでしょ。

翻訳した先を従来と同じものにすれば何の問題もない。

""ではなく"-"を採用するのはどうしてかって？
0 == ""がtrueになるからに決まってる・・0 === ""はfalseなんだけど。"-"なら0 == "-"でもfalseだから打ち間違いで
バグになるのを防げる。だから""ではなくちゃんと数字になりえない"-"を採用するわけ。

どうするかな・・
はじめにsetプロパティをみて順繰りに。"-"は無視。
次に再帰で崩すところは変更しなくていい。
配列が出来た後で、各成分について実行するにあたり、interpreterで配列を然るべきオブジェクトに変換する(typeとかnameとか
speedとかなんかそういうの)。waitやrepeatやloopについての処理はそのまま残す。というかwaitはそのままか。それ以外。
0番目がtypeで、あとはtypeによって場合分け。

パターンの作り方（改訂版）
1.初期設定。
set:[x, y, speed, direction]の形式で指示する。指定しない場合（speed, direction）は"-"をおく。
2.actionのところ。行動配列を置く。
各成分は配列もしくはオブジェクトもしくは文字列。
文字列はshortの先にそれを置くことで展開してパターンにする。
オブジェクトの場合：{wait:40}とか{repeat:3, back:4}とか{loop:8, back:10}とか。
このback:-1で先頭、とかできたらいいね。
配列の場合は実行内容を["config", "add", "-", 5]とか["config", "set", [3, 9], [60, 120]]みたいにしてセットする。
どうかな・・addもそういう風にするか？たとえば、スピードを-5~5の範囲で摂動させるとか。
だったらあっちもrandomRange型にして具体的にあれする場合は[5]とかにするといいね。
fireの場合は["fire", "radial16"]とかして"radial16"はfireプロパティの先に関数を用意しておく感じ。
back:-1で先頭、は即採用。うん。




まずburst作るとしたら手を加えるのはcreateFirePatternのdataんとこ
_cannon.bulletBurstに・・
今this.pattern.execute(this)とあるところをthis.pattern."move"(this)とする。毎フレーム実行する移動についての関数。
で、あー・・actionとは別にこれ用意したほうがよさそうだな・・
moveの方も配列にした方がいいかもだけど一考の余地ありっていうか。下手したら以前と同じように、
ちぐはぐに両方定義して云々連携がどうたらこうたらってことになりかねないから怖いんだよ。あれはひどすぎた。

speedの代わりにshotSpeed, directionの代わりにshotDirectionにするかー。
なぜかというと自身の速度の変化とかも考慮する必要が生じてきそうだからそこら辺を区別したいっていう。
あとあれ、configだと分かりづらいからshotSpeedChangeとかshotDirectionChangeとかにしたいかな。
そうすれば自身の方はspeedChangeとかdirectionChangeとかにできる。
addBehavior("go")とか。behaviorに「速度を位置に足せ！」を追加する。
behaviorは必要に応じてaddやremoveできるように、それをactionで制御し、なおかつ・・

いじるか。
まずはshotSpeedとshotDirectionにするね。
次にconfigを廃止してshotSpeedChangeとshotDirectionChangeにするね。["shotSpeedChange", [3, 6]]とか・・
setでなくsetPosition:[240, 160]とかsetVelocityとかsetShotVelocity:[6, 90]とかにしたいね。

addBehavior
removeBehavior

go: this.position.add(this.velocity);
behaviorListに「直進」って加える。
「画面外で消える」って加える。
speed, direction, shotSpeed, shotDirectionをそれぞれ継続的に変化させるのもbehaviorに入るかもね。
class Behavior{
  constructor(behaviorFunc){
    this.behaviorFunc = behaviorFunc;
    this.active = true; // falseの時は実行しない
  }
  on(){
    this.active = true;
  }
  off(){
    this.active = false;
  }
  execute(obj){
    if(!this.active){ return; }
    this.behaviorFunc(obj); // ここでいろいろやる感じ。
  }
}
これだと細かい変化に対応できないよ。？逐一作るの？まあ、そうか・・
あー違う、これ・・んぁーーめんどいいい
関数、今、moveにセットしてるけど、これを、オブジェクトにする。
{name: 識別用の名前, func:bullet間で共通, active:実行するかしないか。}
nameはactivateBehavior, cancelBehaviorにおいて名前で該当するBehaviorを見つけるために必要。
funcはBullet間で共通だったり。
{name:"outFrameVanish", active:true, func:outFrameVanishBehavior}
function outFrameVanishBehavior(obj){
  if(...画面外...){ obj.vanishFlag = true; }
}
bulletにデフォルトで入ってるのはこれとgoBehaviorのみ。


behavior 案
// 部品を組み合わせる形にしたい。たとえば、・・
// curvingはあんな面白くない感。特定のパラメータ(speed, direction, shotSpeed, shotDirection)のどれかを
// 継続的に変化させるbehaviorを用意して適切にonoffする感じにするかな。
// homingあんま面白くない。やっぱ何フレームかおきに方向変化させるのがいいんじゃね。10フレームおきとか。
// 何が言いたいってこの関数群を破棄してbehaviorという関数群にしてそれをいくつか放り込む形にしたい・・
// bulletのデフォルトとして画面外で消えるってのを常におくようにしてそこに重ねていく形。
// 継続的にパラメータ変化させるっての言ったけど・・
// フレーム間隔くらいは指定してもいいと思う。そうすればactionの方を若干簡潔に出来る。リフレッシュレート
// みたいな。4フレームおきに自機方向を計算してセットするとか。毎フレームでももちろんいいね。
// ていうか毎フレームでいいのか・・毎フレーム自機方向。onoff自由自在。？

// 今現在パターン登録のところでnameとしているところをやめてbehaviorにするとか。デフォルト・・
// go:{位置に速度を足す}, frameOut:{画面外に出たら消える}
// default:0とすることでgoが勝手に入る感じ。frameOutは元から入ってる感じで。うん。うん？goでいいよ

// speedとshotSpeedがあるようにbehaviorとshotBehaviorがあってもいいんじゃない？
// speedやdirectionをセットするみたいにshotBehaviorをセットする（リセットも用意する）イメージ。
["shotBehavior", "brakeAccell", 60, 0.02, 0.1] (減衰時間、減衰割合、加速度)
ってやると。ん。
"go"は常にでいいよ。
事前にCannonを動かす場合を考えてた。たとえばgoを指定して速度をどうするとかそんなような。
bullet動かすにもそこら辺を。
クラスにすると

デフォルトはframeOutBehaviorでそこにまずgoBehaviorが入りその他って感じ。
onとかoffはとりあえず考えなくていいと思う。unShiftで先頭に入れていく。pushではなく。

流れの中でshotにどんなbehaviorを追加するのか、そのリストをaddしたりremoveしたりいろいろいじるイメージ。

やめた。オブジェクトにしよう。で、付け外し出来るようにする。
じゃないと柔軟性が・・
fireみたいにbehavior:{}
で、名前：paramでこれを解釈して名前：関数にする。
これをbehaviorにaddするときにaddならshotbehavior[名前] = その関数ってやって
外したいときはdelete shotBehavior[名前]
全部無くしたいときはshotBehavior = {}でOK.
