STEP1:サイズを480x640に指定
STEP2:ObjectPoolとCrossReferenceArrayを用意する
STEP3:ObjectPool用のダミーオブジェクトを用意する
STEP4:Pキーでポーズ/解除できるようにする
STEP5:プレイヤーをおいて動かしてみる（成功）
STEP6:entityを用意してplayerはそれ経由でいろいろやる。
あと、bulletはすべてここに持たせることにする。めんどうだから。

hide:一定時間速度の方向に進むが見えない、よって当たり判定もない。終わるとshowする
wait:一定時間速度の方向に進む。終わると次の処理。
vanish:自分を消す、Poolに戻すのと配列から無くすのと両方やる必要が。

bulletのふるまい
cannonのふるまい
おわり。

頭の中でごちゃごちゃ考えて全部実現させよう出来る限りスマートにやろう
それは無理。わかってる。
だから、ひとつひとつコツコツ行こうと思うんだけどね。
それだと限界があるんじゃないかって思っちゃうと足が止まる。そして分からなくなるんだよね。
実際もう既にいくつも尻切れトンボで放り出しちゃってるんでね。

たとえばすべてのbulletは直進して画面外で消えるだけってやっても相当いろいろなパターンが実現できるのに。
それをやらないのかっていう。
多分それで突き進んでいったあとでそれやろうとすると無理ってなっちゃうのが怖いらしい。
加速とか今いろいろ考えても仕方ない、

で、撃ち方にしてもnwayとradialだけでもいろいろ・・んー。一定間隔で・・

あるフレームに発射するパターンの・・1発なのか複数か、複数だとしてどんな風なのか、とか。
nwayとline. lineはnwayの速さバージョン。
方向は固定なのか変化するのかとか・・

ていうかjsonだかyamlだか知らないけどあれをあれにするのめちゃ面倒な気がする・・・
だから自分はArray方式でいいです。楽譜方式で。その方が楽でしょ、多分。
・・・・

if(frameCount % 10 === 0){
  const initialAngle = (frameCount % 360) * 10;
  for(let i = 0; i < 30; i++){
    let ptn = {initialize:setParam(width / 2, height / 4, 4, initialAngle + i * 12), execute:go};
    createBullet(ptn);
  }
}

・・今作ったのはradial12の速さ4でさらにangleChangeが毎フレーム+10でさらに
これが10フレームに1回だからつまり角度は100ずつずれている感じ。
これを、Cannonにやらせる？？

if(frameCount % 8 === 0){
  for(let diff = -10; diff <= 10; diff += 10){
    const pos = {x:width / 2, y:height / 4};
    const dir = getPlayerDirection(pos);
    let ptn = {initialize:setParam(pos.x, pos.y, 9, dir + diff), execute:brakeAccell(60, 0.05, 0.1)};
    createBullet(ptn);
  }
}

// waveパターンはこれでいいだろ。打ち出し方向の変化。まあいろいろあるだろうけど。
if(frameCount % 4 === 0 && frameCount % 80 < 60){
  const direction = getPlayerDirection({x:width / 2, y:height / 4}) + sin(frameCount * 4) * 30;
  let ptn = {initialize:setParam(width / 2, height / 4, 6, direction), execute:go};
  createBullet(ptn);
}

// ブレーキアクセル。エイム機能を付けてみたよ。
if(frameCount % 16 === 0){
  for(let direction = 90 - 30; direction <= 90 + 30; direction += 10){
    let ptn = {};
    ptn.initialize = setParam(width / 2, height / 4, 12, direction)
    ptn.execute = brakeAccell(60, 0.05, 0.2, true, 15);
    createBullet(ptn);
  }
}

aim作ったけどこれでいい気がするしよくわかんないな。setParamで足りるだろ。

bulletにセットするpatternがなんかinitializeとexecute持ってて
executeをupdateで実行しているのね。initializeはセットするときに発動していますね。ほーう。

今作ってるのは弾丸の基本的な挙動ですね、これからいろいろ・・んー。
nway(基本方向に対してintervalごとn発), radial(基本方向を含む円形放射状), sweep(基本方向に方向を変えながら一定時間),
sweepにはnoiseを使ったものと普通に正弦波を使ったものとあって片側までで終わるのとか
そういうのってパターンありきだから関数でいう所の1段階上っていうか高級みたいな感じ。
まあ基本はgoだけど。goのnway, goの・・・

// Destinyのような何か。これもbulletPatternの差し替えできるからある意味コンポジットの高級なのよね多分。
// 3WAYとかとも組み合わせられそうな。
if(frameCount % 60 === 0){
  let direction = getPlayerDirection({x:width / 2, y:height / 4});
  for(let i = 0; i < 64; i++){
    let distance = random(160);
    let angle = random(360);
    let x = width / 2 + cos(angle) * distance, y = height / 4 + sin(angle) * distance;
    let ptn = {initialize:setParam(x, y, 12, direction), execute:brakeAccell(30, 0.05, 0.2)};
    createBullet(ptn);
  }
}

// 要らないかな・・
function wave(period, angleChange){
  // periodで方向が元に戻る感じ。
  return (_bullet) => {
    const checkFC = _bullet.properFrameCount % period;
    if(checkFC < (period / 4) || checkFC >= (period * 3 / 4)){
      _bullet.direction += angleChange;
    }else{
      _bullet.direction -= angleChange;
    }
    _bullet.setVelocity(_bullet.speed, _bullet.direction);
    _bullet.position.add(_bullet.velocity);
  }
}

// curving. カーブ。これと発射台の移動を組み合わせると面白い軌道になる。
if(frameCount % 4 === 0){
  let ptn = {initialize:setParam(width / 2, height / 4, 6, 90), execute:curving(0.5)};
  createBullet(ptn);
}
// waving. 揺れながら進む。発射方向をいじると面白そう（90のところ）
if(frameCount % 4 === 0){
  let ptn = {initialize:setParam(width / 2, height / 4, 6, 90), execute:waving(2)};
  createBullet(ptn);
}
// レフトアークガン。もういいでしょ。
if(frameCount % 4 === 0){
  let ptn = {initialize:setParam(width / 2, height / 4, 6, 90), execute:arcGun(10, 30, 10)};
  createBullet(ptn);
}
// decelerateのあとホーミングになり一定フレームでvanish
// 失敗作感がすごい
if(frameCount % 8 === 0 && frameCount % 100 < 40){
  let ptn = {initialize:setParam(width / 2, height / 4, 9, 90), execute:homing(0.05, 3, 180, 30)};
  createBullet(ptn);
}

// 思い出した。んーと、何か出した後で、waitするってやつ。パターンの中に含めるんじゃないかと。
// loopもある意味コンポジット・・同じことを繰り返し。

cannonにとりかかる。

関数の無限ループ化っていうけど普通にセットしておけば普通にループになるから無意味。
何のためにやるかって言ったら一連の流れを繰り返し行わせたいからそうするんでしょ・・。
function endless(funcArray, count, wait){
  funcArrayをすべて実行するのをcount回→waitだけおく→最初に戻る
}
function limited(funcArray, count, wait, loopCount){
  loopCountだけやったら終了するんだけどそのあとどうしよう（詰）
}
たとえばここに
- setSpeed:2
ってかくとデフォルトを変更できる
- endless
  - loop
    - count:2
    - setSpeed:random(3, 6)
    - setDirection:random(0, 360)
    for example: - setPos("relative", random(20, 120), random(0, 360))
    指示がなければspeedは1だしdirectionは0だしposは自分の位置になるよ(default)
    - fire:"unit"

cannonにとりかかりたいんですけど

endlessは毎フレーム中身のfuncを実行するだよ。でもそれだと普通にfuncでいいじゃんね。

4フレームに1回、accelerateを繰り出す、方向は90で固定、速さは3で固定・・？
- setSpeed:3
- setDirection:90
- endless
  - loop
    - countのデフォルトは1.
    - pattern
      - type:"accelerate"
      - acceleration:0.2
      - wait:3

毎回方向を変える場合
- setSpeed:3
- endless
  - loop
    - count:1
    - setDirection:
      - type:random
      - range:[60, 120]
    あるいは自機狙い
      - type:"homing"
      - margin:デフォルトは0
    - pattern
      - type:"accelerate"
      - acceleration:0.2
      - wait:3

方向が変化する場合
DirectionChangeがある場合はそれを足すみたいなやつ。デフォルトは0.
- setSpeed:3
- setDirection:60
- endless
  - fArray:[setDirectionChange(2), "sweep", setDirectionChange(-2), "sweep"}]
  文字列の場合は親[文字列]が関数になってるのでそれを見てね
- sweep
  - loop
    - count:12
    - pattern
      - type:"go"
      -wait:3
  - wait:12

  思うんだけどこの-をつなげるのってどう・・

  (_cannon) => {
    const fc = _cannon.properFrameCount;
    if(fc % 4 === 0 && fc % 60 < (12 * (3 + 1))){
      let ptn = {initialize:setParam(_cannon.position, _cannon.bulletSpeed, _cannon.bulletDirection), execute:go}
    }
  }
  が、sweepに入ってる。
  DirectionChangeはデフォルトが0でこれはupdateで毎回行うので問題ないです。
  bulletの方にも、その要素があれば実行するように指示しておいて・・こういうのはリセット時に破棄したいね（delete使う）

  バーストでちょっと使うだけだけど。

  ・・・

yamlっぽい書き方にこだわる必要はないことが分かった。あれ相当やばいよ。やめとこう。
とりあえずわかったのは-をつなげると配列になるらしいと。要するに配列じゃん。


go と goを1発だけ発射するメソッド っていうのは分けないといけないので・・

bulletに設定するptnっていうのはxとyとspeedとdirectionとexecute関数の他にあとなんか・・んー。option?
optionプロパティがあるならそれを実行するみたいな。

// waveガトリング。ごめんなさい記法が変わりました。
// まあsetParam関数を無くしただけだけどね・・
if(frameCount % 4 === 0){
  let direction = noise(frameCount / 16) * 60 + 60;
  let ptn = {x:width / 2, y:height / 4, speed:6, direction, execute:go};
  createBullet(ptn);
}
